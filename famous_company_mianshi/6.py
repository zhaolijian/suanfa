# 有一个整数数组，请你根据快速排序的思路，找出数组中第K大的数。
# 给定一个整数数组a,同时给定它的大小n和要找的K(K在1到n之间)，请返回第K大的数，保证答案存在。
# 方法1 快速排序
# class Finder:
#     def findKth(self, a, n, K):
#         for i in range(K):
#             for j in range(i + 1, n):
#                 if a[j] <= a[i]:
#                     j += 1
#                 else:
#                     a[i], a[j] = a[j], a[i]
#         return a[K - 1]


# 方法2 堆排序
import heapq
class Finder:
    def findKth(self, a, n, K):
        l = a[:K]
        heapq.heapify(l)
        for i in range(K, n):
            if a[i] > l[0]:
                heapq.heappop(l)
                heapq.heappush(l, a[i])
        return l[0]


if __name__ == '__main__':
    s = Finder()
    a, n, k = [1332802,1177178,1514891,871248,753214,123866,1615405,328656,1540395,968891,1884022,252932,1034406,1455178,821713,486232,860175,1896237,852300,566715,1285209,1845742,883142,259266,520911,1844960,218188,1528217,332380,261485,1111670,16920,1249664,1199799,1959818,1546744,1904944,51047,1176397,190970,48715,349690,673887,1648782,1010556,1165786,937247,986578,798663],49,24
    print(s.findKth(a, n, k))