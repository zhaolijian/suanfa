# 存在n+1个房间，每个房间依次为房间1 2 3...i，每个房间都存在一个传送门，i房间的传送门可以把人传送到房间pi(1<=pi<=i),现在路人甲从房间1开始出发(当前房间1即第一次访问)，每次移动他有两种移动策略：
#     A. 如果访问过当前房间 i 偶数次，那么下一次移动到房间i+1；
#     B. 如果访问过当前房间 i 奇数次，那么移动到房间pi；
# 现在路人甲想知道移动到房间n+1一共需要多少次移动；


# 动态规划解决
# 记录第一次到达节点i的移动次数为dp[i]
# 到达节点i，首先到达i-1，这时跳跃次数为dp[i-1]（第一次到达i-1,肯定是奇数次）,然后跳到array[i-1]-1位置，跳跃次数+1，
# 然后从array[i-1]-1位置经过多次跳跃跳到dp[i-1]位置，跳跃次数为dp[i-1]-dp[array[i-1]-1],这时为第二次到达i-1,往后移动一个位置，跳跃次数+1
# 即dp[i] = dp[i - 1] + 1 + dp[i - 1] - dp[array[i - 1] - 1] + 1
if __name__ == '__main__':
    n = int(input())
    array = list(map(int, input().split()))
    dp = [0] * (n + 1)
    for i in range(1, n + 1):
        dp[i] = 2 * dp[i - 1] - dp[array[i - 1] - 1] + 2
    print(dp[-1] % 1000000007)