# 在 R 行 C 列的矩阵上，我们从 (r0, c0) 面朝东面开始
# 这里，网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。
# 现在，我们以顺时针按螺旋状行走，访问此网格中的每个位置。
# 每当我们移动到网格的边界之外时，我们会继续在网格之外行走（但稍后可能会返回到网格边界）。
# 最终，我们到过网格的所有 R * C 个空间。
# 按照访问顺序返回表示网格位置的坐标列表。


# 思路：我们可以从开始的正方形开始，以螺旋形的形状行走，而忽略我们是否呆在网格中。最终，我们一定已经到达了网格的每一个角落。
# 算法： 检查我们在每个方向的行走长度，我们发现如下模式：1，1，2，2，3，3，4，4，...
# 即我们先向东走 1 单位，然后向南走 1 单位，再向西走 2 单位，再向北走 2 单位，再向东走 3 单位，等等。
# 因为我们的行走方式是自相似的，所以这种模式会以我们期望的方式重复。
class Solution(object):
    def spiralMatrixIII(self, R, C, r0, c0):
        ans = [(r0, c0)]
        if R * C == 1:
            return ans
        number = 1
        for k in range(1, 2*(R+C), 2):
            for dr, dc, dk in ((0, 1, k), (1, 0, k), (0, -1, k+1), (-1, 0, k+1)):
                for _ in range(dk):
                    r0 += dr
                    c0 += dc
                    if 0 <= r0 < R and 0 <= c0 < C:
                        ans.append((r0, c0))
                        number += 1
                        if number == R * C:
                            return ans